{"version":3,"sources":["components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["MainComponent","props","handleSubmit","a","setState","visible","state","setTimeout","indexQ","Math","floor","random","indexC","colors","length","quotes","bind","fetch","then","response","json","this","style","backgroundColor","width","height","id","className","Card","styles","color","CardText","fontSize","marginTop","icon","faQuoteLeft","size","quote","display","justifyContent","author","href","Button","faTwitter","type","onClick","Component","position","left","top","transform","fontWeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a4048a7.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport './MainComponent.css';\nimport React,{Component } from \"react\";\nimport {Card, CardText,Button} from 'reactstrap';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faTwitter}from '@fortawesome/free-brands-svg-icons';\nimport {faQuoteLeft} from '@fortawesome/free-solid-svg-icons';\n\nclass MainComponent extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            quotes:[],\n            colors:['#16a085', '#27ae60', '#2c3e50', '#f39c12', '#e74c3c', \n                    '#9b59b6', '#FB6964', '#342224', \"#472E32\", \"#BDBB99\", \n                    \"#77B1A9\", \"#73A857\"],\n            indexC:0,\n            indexQ:0,\n            visible:true\n        };\n        this.handleSubmit=this.handleSubmit.bind(this);\n    }\n    componentDidMount(){\n        fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n        .then(response=>response.json())\n        .then(quotes=>this.setState({quotes:quotes}),()=>{\n            this.handleSubmit();\n        });\n        this.handleSubmit();\n    }\n    handleSubmit=async()=>{\n        await this.setState({\n            visible:!this.state.visible\n        });\n        await setTimeout(()=>{\n            this.setState({\n                indexQ:Math.floor(Math.random()*102),\n                indexC:Math.floor(Math.random()*this.state.colors.length)\n                })\n            },400);\n        await setTimeout(()=>{\n        this.setState({\n            visible:!this.state.visible\n        });\n        },400)\n    }\n    render(){\n        // console.log(this.state.quotes);\n        return(\n            <div style={{\n                backgroundColor: this.state.colors[this.state.indexC],\n                width: '100vw',\n                height: '100vh'\n              }} id=\"mainBody\" className={this.state.visible?\"fadeIn\":\"fadeOut\"}>\n                <Card id=\"quote-box\" className='col-md-4 col-12' style={styles}>\n                    <div className=\"row\" style={{color:this.state.colors[this.state.indexC]}}>\n                        <CardText id=\"text\" className='col-12 text-center' style={{fontSize:'1.75em',marginTop:10}}>\n                        <FontAwesomeIcon icon={faQuoteLeft} size={'1x'} /> {this.state.quotes.length?this.state.quotes[this.state.indexQ].quote:null}\n                        </CardText>\n                    </div>\n                    <div className=\"row\" style={{color:this.state.colors[this.state.indexC],display:'flex',justifyContent:'flex-end',marginTop:10}}>\n                        <CardText id=\"author\" className=\"mr-3\">\n                            -{this.state.quotes.length?this.state.quotes[this.state.indexQ].author:null}\n                        </CardText>\n                    </div>\n                    <br/>\n                    <div className=\"row\" style={{color:this.state.colors[this.state.indexC]}}>\n                        <div className=\"col-6\">\n\t                        <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\">\n\t                            <Button style={{backgroundColor:this.state.colors[this.state.indexC]}}>\n\t                                <FontAwesomeIcon icon={faTwitter} />\n\t                            </Button>\n\t                        </a>\n                        </div>\n                        <div className=\"col-6\" style={{display: 'flex', justifyContent: 'flex-end'}}>\n                            <Button type=\"submit\" id=\"new-quote\" onClick={this.handleSubmit} \n                            style={{backgroundColor:this.state.colors[this.state.indexC]}}>New Quote</Button>\n                        </div>\n                    </div>\n                    <br/>\n                </Card>\n            </div>\n        );\n    }\n}\nexport default MainComponent;\nconst styles ={\n    position: 'absolute', left: '50%', top: '45%',\n    transform: 'translate(-50%, -50%)',\n    fontWeight:400\n};\n","import React from 'react';\nimport MainComponent from './components/MainComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}